import tkinter as tk
from tkinter import messagebox
from tkinter import ttk
import sqlite3

class GenshinImpactApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Genshin Impact")
        self.root.geometry("600x500")
        self.root.config(bg="#2E3B55")

        # Create database and table
        self.create_table()

        # Create UI elements
        self.create_widgets()

    def create_table(self):
        """Create the characters table if it doesn't exist."""
        conn = sqlite3.connect("genshin_impact.db")
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS characters (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT,
                element TEXT,
                weapon TEXT,
                home TEXT,
                level INTEGER
            )
        ''')
        conn.commit()
        conn.close()

    def create_widgets(self):
        """Create the application widgets."""
        # Title Label
        self.title_label = tk.Label(
            self.root,
            text="Genshin Impact",
            font=("Arial", 18, "bold"),
            bg="#2E3B55",
            fg="#F4F1BB"
        )
        self.title_label.grid(row=0, column=0, columnspan=3, pady=10)

        # Character Form
        self.name_label = tk.Label(self.root, text="Character Name:", font=("Arial", 12), bg="#2E3B55", fg="#F4F1BB")
        self.name_label.grid(row=1, column=0, padx=10, pady=5, sticky="w")
        self.name_entry = tk.Entry(self.root, font=("Arial", 12))
        self.name_entry.grid(row=1, column=1, padx=10, pady=5)

        self.element_label = tk.Label(self.root, text="Element:", font=("Arial", 12), bg="#2E3B55", fg="#F4F1BB")
        self.element_label.grid(row=2, column=0, padx=10, pady=5, sticky="w")
        self.element_entry = tk.Entry(self.root, font=("Arial", 12))
        self.element_entry.grid(row=2, column=1, padx=10, pady=5)

        self.weapon_label = tk.Label(self.root, text="Weapon:", font=("Arial", 12), bg="#2E3B55", fg="#F4F1BB")
        self.weapon_label.grid(row=3, column=0, padx=10, pady=5, sticky="w")
        self.weapon_entry = tk.Entry(self.root, font=("Arial", 12))
        self.weapon_entry.grid(row=3, column=1, padx=10, pady=5)

        self.home_label = tk.Label(self.root, text="Home:", font=("Arial", 12), bg="#2E3B55", fg="#F4F1BB")
        self.home_label.grid(row=4, column=0, padx=10, pady=5, sticky="w")
        self.home_entry = tk.Entry(self.root, font=("Arial", 12))
        self.home_entry.grid(row=4, column=1, padx=10, pady=5)

        self.level_label = tk.Label(self.root, text="Level:", font=("Arial", 12), bg="#2E3B55", fg="#F4F1BB")
        self.level_label.grid(row=5, column=0, padx=10, pady=5, sticky="w")
        self.level_entry = tk.Entry(self.root, font=("Arial", 12))
        self.level_entry.grid(row=5, column=1, padx=10, pady=5)

        # Buttons: Add, Update, Delete
        self.add_button = self.create_button("Add", "#6c7b8b", "#f1c40f", self.add_character)
        self.update_button = self.create_button("Update", "#3498db", "#2980b9", self.update_character)
        self.delete_button = self.create_button("Delete", "#e74c3c", "#c0392b", self.delete_character)

        self.add_button.grid(row=6, column=0, padx=10, pady=5, sticky="ew")
        self.update_button.grid(row=6, column=1, padx=10, pady=5, sticky="ew")
        self.delete_button.grid(row=6, column=2, padx=10, pady=5, sticky="ew")

        # Search Box
        self.search_label = tk.Label(self.root, text="Search Character:", font=("Arial", 12), bg="#2E3B55", fg="#F4F1BB")
        self.search_label.grid(row=7, column=0, padx=10, pady=5, sticky="w")
        self.search_entry = tk.Entry(self.root, font=("Arial", 12))
        self.search_entry.grid(row=7, column=1, padx=10, pady=5)

        self.search_button = self.create_button("Search", "#3498db", "#2980b9", self.search_character)
        self.search_button.grid(row=8, column=0, columnspan=3, pady=10, sticky="ew")

        # Character Table
        self.character_tree = ttk.Treeview(self.root, columns=("ID", "Name", "Element", "Weapon", "Home", "Level"), show="headings", height=8)
        self.character_tree.grid(row=9, column=0, columnspan=3, padx=10, pady=10)

        self.character_tree.heading("ID", text="ID")
        self.character_tree.heading("Name", text="Name")
        self.character_tree.heading("Element", text="Element")
        self.character_tree.heading("Weapon", text="Weapon")
        self.character_tree.heading("Home", text="Home")
        self.character_tree.heading("Level", text="Level")

        self.character_tree.column("ID", width=30)
        self.character_tree.bind("<Double-1>", self.on_treeview_select)

        self.load_characters()

    def create_button(self, text, color, hover_color, command):
        """Helper function to create a button with hover effect."""
        button = tk.Button(self.root, text=text, font=("Arial", 10), bg=color, fg="white", relief="flat", command=command)
        button.config(width=10, height=1)
        button.bind("<Enter>", lambda event, button=button, color=hover_color: button.config(bg=color))
        button.bind("<Leave>", lambda event, button=button, color=color: button.config(bg=color))
        return button

    def add_character(self):
        """Add a new character to the database."""
        name = self.name_entry.get()
        element = self.element_entry.get()
        weapon = self.weapon_entry.get()
        home = self.home_entry.get()
        level = self.level_entry.get()

        if not name or not element or not weapon or not home or not level:
            messagebox.showerror("Error", "Please fill in all fields.")
            return

        try:
            level = int(level)
        except ValueError:
            messagebox.showerror("Error", "Level must be an integer.")
            return

        conn = sqlite3.connect("genshin_impact.db")
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO characters (name, element, weapon, home, level)
            VALUES (?, ?, ?, ?, ?)
        ''', (name, element, weapon, home, level))
        conn.commit()
        conn.close()

        self.clear_inputs()
        self.load_characters()
        messagebox.showinfo("Success", "Character added successfully.")

    def update_character(self):
        """Update selected character."""
        selected_item = self.character_tree.selection()
        if not selected_item:
            messagebox.showerror("Error", "Please select a character to update.")
            return

        character_id = self.character_tree.item(selected_item)["values"][0]

        name = self.name_entry.get()
        element = self.element_entry.get()
        weapon = self.weapon_entry.get()
        home = self.home_entry.get()
        level = self.level_entry.get()

        if not name or not element or not weapon or not home or not level:
            messagebox.showerror("Error", "Please fill in all fields.")
            return

        try:
            level = int(level)
        except ValueError:
            messagebox.showerror("Error", "Level must be an integer.")
            return

        conn = sqlite3.connect("genshin_impact.db")
        cursor = conn.cursor()
        cursor.execute('''
            UPDATE characters
            SET name = ?, element = ?, weapon = ?, home = ?, level = ?
            WHERE id = ?
        ''', (name, element, weapon, home, level, character_id))
        conn.commit()
        conn.close()

        self.clear_inputs()
        self.load_characters()
        messagebox.showinfo("Success", "Character updated successfully.")

    def delete_character(self):
        """Delete selected character."""
        selected_item = self.character_tree.selection()
        if not selected_item:
            messagebox.showerror("Error", "Please select a character to delete.")
            return

        character_id = self.character_tree.item(selected_item)["values"][0]

        conn = sqlite3.connect("genshin_impact.db")
        cursor = conn.cursor()
        cursor.execute('''
            DELETE FROM characters WHERE id = ?
        ''', (character_id,))
        conn.commit()
        conn.close()

        self.clear_inputs()
        self.load_characters()
        messagebox.showinfo("Success", "Character deleted successfully.")

    def search_character(self):
        """Search characters by name."""
        search_query = self.search_entry.get().strip()

        conn = sqlite3.connect("genshin_impact.db")
        cursor = conn.cursor()
        cursor.execute('''
            SELECT * FROM characters WHERE name LIKE ?
        ''', (f"%{search_query}%",))
        characters = cursor.fetchall()
        conn.close()

        self.load_characters(characters)

    def load_characters(self, characters=None):
        """Load characters from the database."""
        for item in self.character_tree.get_children():
            self.character_tree.delete(item)

        if not characters:
            conn = sqlite3.connect("genshin_impact.db")
            cursor = conn.cursor()
            cursor.execute('SELECT * FROM characters')
            characters = cursor.fetchall()
            conn.close()

        for character in characters:
            self.character_tree.insert("", "end", values=character)

    def clear_inputs(self):
        """Clear all input fields."""
        self.name_entry.delete(0, tk.END)
        self.element_entry.delete(0, tk.END)
        self.weapon_entry.delete(0, tk.END)
        self.home_entry.delete(0, tk.END)
        self.level_entry.delete(0, tk.END)

    def on_treeview_select(self, event):
        """Populate the fields with the selected character's data."""
        selected_item = self.character_tree.selection()
        if not selected_item:
            return

        character_data = self.character_tree.item(selected_item)["values"]

        self.name_entry.delete(0, tk.END)
        self.name_entry.insert(0, character_data[1])

        self.element_entry.delete(0, tk.END)
        self.element_entry.insert(0, character_data[2])

        self.weapon_entry.delete(0, tk.END)
        self.weapon_entry.insert(0, character_data[3])

        self.home_entry.delete(0, tk.END)
        self.home_entry.insert(0, character_data[4])

        self.level_entry.delete(0, tk.END)
        self.level_entry.insert(0, character_data[5])

if __name__ == "__main__":
    root = tk.Tk()
    app = GenshinImpactApp(root)
    root.mainloop()    